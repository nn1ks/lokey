name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  DEFMT_LOG: trace

jobs:
  lokey:
    runs-on: ubuntu-latest
    if: always()
    strategy:
      fail-fast: false
      matrix:
        mcu: [no_mcu, nrf52840, rp2040]
        include:
          - mcu: no_mcu
            target: x86_64-unknown-linux-gnu
            mcu_features: ""
          - mcu: nrf52840
            target: thumbv7em-none-eabihf
            mcu_features: "nrf52840"
          - mcu: rp2040
            target: thumbv6m-none-eabi
            mcu_features: "rp2040"
    env:
      FEATURE_COMBINATIONS: ";defmt;usb;defmt usb;ble;defmt ble;usb ble;defmt usb ble"
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Print rust version
        run: |
          rustc --version
          cargo --version
      - name: Build
        run: |
          export IFS=";"
          for features in $FEATURE_COMBINATIONS; do
            echo "::group::Features: \"$features ${{ matrix.mcu_features }}\""
            cargo build -p lokey --verbose --target ${{ matrix.target }} --no-default-features --features "$features ${{ matrix.mcu_features }}"
            echo "::endgroup::"
          done
      - name: Run clippy
        run: |
          export IFS=";"
          for features in $FEATURE_COMBINATIONS; do
            echo "::group::Features: \"$features ${{ matrix.mcu_features }}\""
            cargo clippy -p lokey --verbose --target ${{ matrix.target }} --no-default-features --features "$features ${{ matrix.mcu_features }}"
            echo "::endgroup::"
          done
      - name: Run doc tests
        if: matrix.mcu != 'no_mcu'
        run: |
          export IFS=";"
          for features in $FEATURE_COMBINATIONS; do
            echo "::group::Features: \"$features ${{ matrix.mcu_features }}\""
            cargo test -p lokey --verbose --doc -Zdoctest-xcompile --target ${{ matrix.target }} --no-default-features --features "$features ${{ matrix.mcu_features }}"
            echo "::endgroup::"
          done
  lokey_common:
    runs-on: ubuntu-latest
    if: always()
    strategy:
      fail-fast: false
      matrix:
        target: ["x86_64-unknown-linux-gnu", "thumbv7em-none-eabihf", "thumbv6m-none-eabi"]
    env:
      FEATURE_COMBINATIONS: ";defmt;layer blink status-led-array;defmt layer blink status-led-array ble;"
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Print rust version
        run: |
          rustc --version
          cargo --version
      - name: Build
        run: |
          export IFS=";"
          for features in $FEATURE_COMBINATIONS; do
            echo "::group::Features: \"$features\""
            cargo build -p lokey_common --verbose --target ${{ matrix.target }} --no-default-features --features "$features"
            echo "::endgroup::"
          done
      - name: Run clippy
        run: |
          export IFS=";"
          for features in $FEATURE_COMBINATIONS; do
            echo "::group::Features: \"$features\""
            cargo clippy -p lokey_common --verbose --target ${{ matrix.target }} --no-default-features --features "$features"
            echo "::endgroup::"
          done
  lokey_keyboard:
    runs-on: ubuntu-latest
    if: always()
    strategy:
      fail-fast: false
      matrix:
        target: ["x86_64-unknown-linux-gnu", "thumbv7em-none-eabihf", "thumbv6m-none-eabi"]
    env:
      FEATURE_COMBINATIONS: ";defmt;usb;defmt usb;ble;defmt ble;usb ble;defmt usb ble"
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Print rust version
        run: |
          rustc --version
          cargo --version
      - name: Build
        run: |
          export IFS=";"
          for features in $FEATURE_COMBINATIONS; do
            echo "::group::Features: \"$features\""
            cargo build -p lokey_keyboard --verbose --target ${{ matrix.target }} --no-default-features --features "$features"
            echo "::endgroup::"
          done
      - name: Run clippy
        run: |
          export IFS=";"
          for features in $FEATURE_COMBINATIONS; do
            echo "::group::Features: \"$features\""
            cargo clippy -p lokey_keyboard --verbose --target ${{ matrix.target }} --no-default-features --features "$features"
            echo "::endgroup::"
          done
      - name: Run doc tests
        if: matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          export IFS=";"
          for features in $FEATURE_COMBINATIONS; do
            echo "::group::Features: \"$features\""
            cargo test -p lokey_keyboard --verbose --doc -Zdoctest-xcompile --target ${{ matrix.target }} --no-default-features --features "$features"
            echo "::endgroup::"
          done
  examples:
    runs-on: ubuntu-latest
    if: always()
    strategy:
      fail-fast: false
      matrix:
        example: [keyboard_nrf52840, keyboard_rp2040]
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: examples/${{ matrix.example }}
      - name: Print rust version
        run: |
          rustc --version
          cargo --version
      - name: Check formatting
        run: cargo fmt --verbose --check
        working-directory: examples/${{ matrix.example }}
      - name: Build
        run: cargo build --verbose
        working-directory: examples/${{ matrix.example }}
      - name: Run clippy
        run: cargo clippy --verbose -- -D warnings
        working-directory: examples/${{ matrix.example }}
  format:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Print rust version
        run: |
          rustc --version
          cargo --version
      - name: Check formatting
        run: cargo fmt --verbose --check
